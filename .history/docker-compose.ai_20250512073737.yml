#
# NOTE: This stack is part of a multi-file Docker Compose setup.
#
# Other Compose files in this workspace:
#   - docker-compose.home.yml: Core home automation services (e.g., Home Assistant, Zigbee2MQTT, etc.)
#   - docker-compose.utils.yml: Utility/infrastructure services (Portainer, Watchtower, Nginx Proxy Manager, Tailscale, Cloudflared)
#
# This file (docker-compose.ai.yml) contains AI/ML services:
#   - frigate
#   - ollama
#   - stable-diffusion-webui
#   - whisper
#   - qdrant
#   - tgi
#   - xtts
#   - ovos
#
# See the other files for additional services and to bring up the full stack, use:
#   docker-compose -f "docker-compose.ai.yml" -f "docker-compose.home.yml" -f "docker-compose.utils.yml" up -d
#

services:
  frigate:
    image: ghcr.io/blakeblackshear/frigate:stable
    container_name: frigate
    restart: unless-stopped
    privileged: true
    shm_size: '64mb'
    devices:
      - /dev/bus/usb:/dev/bus/usb
    volumes:
      - ./frigate/config:/config
      - ./frigate/media:/media/frigate
      - /etc/localtime:/etc/localtime:ro
    ports:
      - '5000:5000' # Frigate UI
      - '8554:8554' # RTSP
      - '8555:8555/tcp' # WebRTC
    environment:
      - FRIGATE_RTSP_PASSWORD=changeme

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    volumes:
      - ./ollama:/root/.ollama
    ports:
      - '11434:11434'
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Documentation for ollama usage
  #
  # To run a model using ollama, use the following command:
  #
  # sudo docker exec -it ollama ollama run <model_name>
  #
  # Example:
  # sudo docker exec -it ollama ollama run llama3:8b
  #
  # To list available models:
  # sudo docker exec -it ollama ollama list
  #
  # Ensure the ollama container is running and accessible on port 11434.

  # Stable Diffusion WebUI (image generation)
  stable-diffusion-webui:
    image: sd-auto:78
    container_name: stable-diffusion-webui
    restart: unless-stopped
    ports:
      - '7860:7860'
    volumes:
      - ./stable-diffusion/models:/models
      - ./stable-diffusion/outputs:/outputs
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Australia/Brisbane
      - CLI_ARGS=--listen
      # If using CPU only, add:
      # - COMMANDLINE_ARGS=--use-cpu all --no-half
    # Uncomment for GPU support if available:
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Whisper (voice-to-text)
  whisper:
    image: rhasspy/wyoming-whisper:latest
    container_name: whisper
    restart: unless-stopped
    command: >
      --model base.en
      --language en
      --data-dir /data
      --download-dir /data
    ports:
      - '10300:10300'
    volumes:
      - ./whisper/data:/data

  # Qdrant (vector database for AI memory)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    ports:
      - '6333:6333'
    volumes:
      - ./qdrant/data:/qdrant/storage

  # HuggingFace Text Generation Inference (LLM server)
  tgi:
    image: ghcr.io/huggingface/text-generation-inference:latest
    container_name: tgi
    restart: unless-stopped
    ports:
      - '8080:80'
    volumes:
      - ./tgi/data:/data

  # XTTS (text-to-speech with voice cloning)
  xtts:
    image: ghcr.io/coqui-ai/tts:latest  # Official Coqui image for XTTSv2 and GPU
    container_name: xtts
    restart: unless-stopped
    entrypoint: tts-server
    command: >
      --model_path /workspace/model/my_xtts_v2_local
      --config_path /workspace/model/my_xtts_v2_local/config.json
      --speakers_file_path /workspace/model/my_xtts_v2_local/speakers_xtts.pth
      --port 5002
      --use_cuda true
    volumes:
      - ./xtts/models:/workspace/model
      - ./xtts/speakers:/workspace/speakers
    ports:
      - "5002:5002"
    environment:
      - COQUI_TOS_AGREED=1
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
  # NOTE: synesthesiam/coqui-tts:latest does NOT support XTTSv2 models.
  # Use ghcr.io/coqui-ai/tts:latest for XTTSv2 support.
  # Model files must be in ./xtts/models/my_xtts_v2_local/ on the host.
  # Keep this service running until confirmed stable.

  # TROUBLESHOOTING NOTES for XTTSv2/Coqui TTS setup:
  #
  # 1. Model files must be named exactly:
  #    - config.json
  #    - vocab.json
  #    - model.pth
  #    - speakers_xtts.pth
  #
  # 2. Do NOT use --model_dir (unsupported by tts-server). Use --model_path <directory> instead.
  #
  # 3. If you see 'TypeError: expected str, bytes or os.PathLike object, not NoneType',
  #    it means config.json was not found or is misnamed.
  #
  # 4. If you see 'unrecognized arguments: --model_dir', you are using the wrong argument.
  #
  # 5. Always verify file visibility inside the container with:
  #      docker-compose -f "docker-compose.ai.yml" exec xtts ls -lA /workspace/model/my_xtts_v2_local/
  #
  # 6. If files appear as config.json.json or vocab.json.json, remove the extra .json extension.
  #
  # 7. After any change, restart the container and check logs:
  #      docker-compose -f "docker-compose.ai.yml" up -d --force-recreate xtts
  #      docker-compose -f "docker-compose.ai.yml" logs -f xtts
  #
  # 8. These steps have been tested and should not be repeated unless the error reoccurs.
  #
  # 9. If new errors appear, document them here before further troubleshooting.
  #
  # END TROUBLESHOOTING NOTES

  # XTTSv2 API Usage Example (PowerShell, Built-in Voice)
  #
  # To synthesize speech using a built-in XTTSv2 voice from Windows PowerShell:
  #
  # 1. Prepare your text (multi-line supported):
  #     $poemText = @"
  #     In the dappled hush of the ancient wood,
  #     Jacob and Ryan tread where few have stood;
  #     ...
  #     "@
  #
  # 2. Set the output directory (create if needed):
  #     $outputDir = "J:\workspace\Home automation stack\XTTS-v2\audio_outputs\"
  #     If (-Not (Test-Path $outputDir)) { New-Item -ItemType Directory -Path $outputDir }
  #
  # 3. Synthesize speech using a built-in voice (e.g., Claribel Dervla):
  #     Invoke-WebRequest -Uri "http://localhost:5002/api/tts?text=$([System.Web.HttpUtility]::UrlEncode($poemText))&speaker_id=Claribel Dervla&language_id=en" -Method GET -OutFile "$outputDir\poem_claribel_cpu.wav"
  #
  # - Replace 'Claribel Dervla' with any available built-in speaker_id.
  # - Replace 'en' with the desired language_id if needed.
  # - The output WAV file will be saved to the specified directory.
  #
  # This approach is confirmed working (May 2025).

  #
  # XTTSv2 API Usage Example (PowerShell, built-in voice)
  #
  # To synthesize speech using a built-in voice (e.g., "Claribel Dervla") and save the output as a WAV file:
  #
  # $poemText = @"
  # In the dappled hush of the ancient wood,
  # Jacob and Ryan tread where few have stood;
  # With baskets poised and hearts alight,
  # They hunt small caps in the morning light.
  # "Observe," whispers nature's gentle guide,
  # "As Jacob stoops where the mosses hide;
  # Ryan marvels at a toadstool fair,
  # Its ruby crown glowing rich and rare."
  # Through fern and frond their laughter rings,
  # As spores beneath their footsteps sing;
  # Two kindred souls on a fungal questâ€”
  # In mushroom magic, they're truly blessed.
  # "@
  # $outputDir = "J:\workspace\Home automation stack\XTTS-v2\audio_outputs\"
  # If (-Not (Test-Path $outputDir)) { New-Item -ItemType Directory -Path $outputDir }
  # Invoke-WebRequest -Uri "http://localhost:5002/api/tts?text=$([System.Web.HttpUtility]::UrlEncode($poemText))&speaker_id=Claribel Dervla&language_id=en" -Method GET -OutFile "$outputDir\poem_claribel_cpu.wav"
  #
  # This will synthesize the text using the built-in voice and save the result as a WAV file.
  #
  # For more voices, see the XTTSv2 documentation or query the API for available speaker IDs.

  # OVOS (OpenVoiceOS) - Voice Assistant Service
  #
  # This service runs the OVOS core, configured to use your existing Whisper (Wyoming STT) and XTTS (Coqui TTS) services.
  #
  # Configuration and data are persisted in ./ovos_config/config and ./ovos_config/data.
  #
  # Audio input/output in Docker is complex on Windows; for now, focus on core/skill testing and API integration.
  #
  # To start OVOS:
  #   docker-compose -f "docker-compose.ai.yml" up -d ovos
  #
  # To view logs:
  #   docker-compose -f "docker-compose.ai.yml" logs -f ovos
  #
  # The OVOS GUI websocket will be available on port 8181.
  #
  # mycroft.conf is mapped from ./ovos_config/config/mycroft.conf
  #
  # For more info, see https://github.com/OpenVoiceOS/ovos-docker

  ovos_messagebus:
    image: smartgic/ovos-messagebus:latest
    container_name: ovos_messagebus
    hostname: ovos_messagebus
    restart: unless-stopped
    volumes:
      - ./ovos_config/config:/home/ovos/.config/mycroft:ro
    # Use port 8181 directly without mapping to a different port
    ports:
      - "8181:8181"
    environment:
      - TZ=Australia/Brisbane
    networks:
      - ovos_network
    healthcheck:
      test: ["CMD", "curl", "--header", "Connection: Upgrade", "--header", "Upgrade: Websocket", "http://127.0.0.1:8181/core"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    
  ovos:
    image: smartgic/ovos-core:latest
    container_name: ovos
    restart: unless-stopped
    depends_on:
      ovos_messagebus:
        condition: service_healthy
    volumes:
      - ./ovos_config/config:/home/ovos/.config/mycroft
      - ./ovos_config/data:/home/ovos/.local/share/mycroft
    ports:
      - "8183:8181"
    environment:
      - TZ=Australia/Brisbane
      - MESSAGEBUS_HOST=ovos_messagebus
      - MESSAGEBUS_PORT=8181
    networks:
      - ovos_network
    # If all services are in this compose file, OVOS can resolve 'whisper' and 'xtts' by container name.
    # For advanced audio passthrough, see OVOS docs (Linux only).

# Add more AI/video services as needed

# Create a dedicated network for OVOS services
networks:
  ovos_network:
    name: ovos_network

# Additional Documentation for Home Automation Stack
#
# General Docker Commands:
#
# Start all services:
# docker-compose -f docker-compose.ai.yml up -d
#
# Stop all services:
# docker-compose -f docker-compose.ai.yml down
#
# Restart a specific service:
# docker-compose -f docker-compose.ai.yml restart <service_name>
#
# XTTS (Text-to-Speech) Important Notes:
#
# - Model Directory Structure: Models are persisted by mapping a host directory
#   (./xtts/models) to the container's default model cache path
#   (/root/.local/share/tts). This prevents re-downloads on restart.
#
# - Voice Cloning: XTTSv2 supports voice cloning from short audio samples (6+ seconds).
#   Store reference voice samples in ./xtts/speakers/ directory for organization.
#
# - GPU Acceleration: XTTSv2 is computationally intensive and strongly benefits from GPU.
#   Without GPU acceleration, speech generation will be much slower.
#
# - First Run: On first startup, XTTSv2 will download a large model (~7GB).
#   This may take significant time depending on your internet connection.
#
# - API Usage: To use the XTTS API for voice cloning, send a POST request to:
#   http://localhost:5002/api/tts with JSON body containing:
#   {
#     "text": "Your text to synthesize",
#     "speaker_wav": "base64_encoded_audio_sample",
#     "language": "en" (or other supported language code)
#   }
#
# - Supported Languages: XTTSv2 supports 17 languages including English (en),
#   Spanish (es), French (fr), German (de), Italian (it), Portuguese (pt),
#   Polish (pl), Turkish (tr), Russian (ru), Dutch (nl), Czech (cs), Arabic (ar),
#   Chinese (zh-cn), Japanese (ja), Korean (ko), Hungarian (hu), and Hindi (hi).
#
# - Audio Format: For best results with voice cloning, use WAV files with:
#   * 24kHz sample rate (preferred for XTTSv2, which will resample other rates)
#   * Minimal background noise
#   * At least 6 seconds of clear speech
#
# Resource Management:
#
# - Multiple AI services running simultaneously (especially Ollama, TGI,
#   Stable Diffusion, and XTTS) can be extremely resource-intensive.
# - Monitor system resources (RAM, VRAM, CPU) regularly using tools like:
#   * docker stats (for container resource usage)
#   * nvidia-smi (for GPU usage if using NVIDIA GPUs)
# - Consider adjusting resource limits for containers if necessary.
#
# Networking Overview:
#
# - All services run on a Docker bridge network (likely homeautomationstack_default)
# - Main service access points:
#   * Frigate UI: http://<host_ip>:5000
#   * Stable Diffusion WebUI: http://<host_ip>:7860
#   * Ollama API: http://<host_ip>:11434
#   * Whisper API: http://<host_ip>:10300
#   * Qdrant API: http://<host_ip>:6333
#   * TGI API: http://<host_ip>:8080
#   * XTTS API: http://<host_ip>:5002
#   * OVOS GUI WebSocket: http://<host_ip>:8181
#
# GPU Allocation:
#
# - Ollama and XTTS are configured to use GPU by default
# - For stable-diffusion-webui, uncomment the GPU section for much better performance
# - For TGI (text-generation-inference), consider enabling GPU for practical use
#   with larger models
#
# Text Generation Inference (TGI) Configuration:
#
# - The TGI service doesn't specify a model by default
# - To load a specific model, add environment variables like:
#   environment:
#     - MODEL_ID=mistralai/Mistral-7B-Instruct-v0.1
#
# Initial Model Downloads:
#
# - Several services will download large models on first run:
#   * Ollama: Models range from 1GB to 65GB+ depending on selection
#   * TGI: Large LLMs typically 2GB-30GB depending on model
#   * XTTS: ~7GB for the full XTTSv2 model and dependencies
#   * Stable Diffusion: Base models ~2-7GB each
# - Ensure sufficient disk space and a stable internet connection
# - Initial downloads can take anywhere from minutes to hours
#
# Security Considerations:
#
# - Change default passwords (like FRIGATE_RTSP_PASSWORD) immediately
# - If exposing services outside your local network:
#   * Use strong authentication
#   * Consider using HTTPS (via reverse proxy)
#   * Prefer VPN access over direct port forwarding
#   * Regularly update container images for security patches
#
# Updating Services:
#
# - Pull latest images: docker-compose -f docker-compose.ai.yml pull
# - Restart with new images: docker-compose -f docker-compose.ai.yml up -d
# - Check container logs after updates: docker logs <container_name>
#
# PUID/PGID Explanation:
#
# - Used for stable-diffusion-webui and potentially other services
# - Sets internal user/group ID for container processes
# - Ensures correct file ownership on mounted volumes
# - Find your host user's IDs with: id -u (PUID) and id -g (PGID)
#
# Data Volume Management:
#
# - Model and media data volumes can grow very large over time
# - Check Docker disk usage with: docker system df
# - Monitor specific volume directories: du -sh ./*/
# - Consider periodic cleanup of unused models and media
#
# Home Automation Stack Overall Structure:
#
# The complete stack is organized across three compose files:
# - docker-compose.ai.yml: AI and ML services (this file)
# - docker-compose.home.yml: Core home automation services
# - docker-compose.utils.yml: Infrastructure and utility services
#
# Utility Services (from docker-compose.utils.yml):
#
# - Portainer (container:portainer):
#   Web-based Docker management UI available at http://<host_ip>:9000
#
# - Watchtower (container:watchtower):
#   Automatic container updates when new images are available
#
# - Nginx Proxy Manager (container:nginx-proxy-manager):
#   Reverse proxy and SSL management, admin UI at http://<host_ip>:81
#
# - Tailscale (container:tailscale):
#   Secure remote access to your network using Tailscale VPN
#
# - Cloudflared (container:cloudflared):
#   Cloudflare tunnel for secure external access without port forwarding
#
# See docker-compose.utils.yml for detailed configuration of these services.
#
# Backup and Restore:
#
# To back up critical data, copy the following directories:
# - ./frigate/config and ./frigate/media
# - ./ollama (entire directory, not just models)
# - ./qdrant/data
# - ./stable-diffusion/models and ./stable-diffusion/outputs
# - ./whisper/data
# - ./xtts/models and ./xtts/speakers
# - ./ovos_config/config and ./ovos_config/data
#
# To restore, replace the directories with the backed-up versions.
#
# Environment Variables:
#
# - FRIGATE_RTSP_PASSWORD: Password for RTSP streams in Frigate.
# - PUID and PGID: User and group IDs for permissions in Stable Diffusion.
# - TZ: Timezone for services (e.g., Australia/Brisbane).
#
# Service-Specific Notes:
#
# Frigate:
# - Configuration file: ./frigate/config/config.yaml
# - Media storage: ./frigate/media/
#
# Stable Diffusion:
# - GPU vs. CPU: Use CLI_ARGS=--use-cpu all --no-half for CPU-only mode.
#
# Ollama:
# - Run a model: sudo docker exec -it ollama ollama run <model_name>
# - List models: sudo docker exec -it ollama ollama list
#
# OVOS:
# - Configuration file: ./ovos_config/config/mycroft.conf
# - Data storage: ./ovos_config/data/
#
# Note: Home Assistant is defined in a separate compose file (docker-compose.home.yml)
#
# Troubleshooting Tips:
#
# - Check container logs:
#   docker logs <container_name>
#
# - Verify container status:
#   docker ps
#
# - Restart Docker service if containers fail to start:
#   sudo systemctl restart docker
#
# - Ensure sufficient disk space for large models and media files.

#
# TROUBLESHOOTING LOG (as of May 2025)
#
# OVOS (OpenVoiceOS) container troubleshooting steps and findings:
#
# 1. Confirmed Python3 and print() work in ovos container (hello.py test).
# 2. Confirmed websocket-client, ssl, and socket libraries import successfully (test_import.py).
# 3. Any script attempting websocket.create_connection() to ovos_messagebus:8181 exits with NO output (even with verbose tracing and exception handling).
# 4. Output redirection to /tmp/*.txt works for all scripts except those that attempt a websocket connection.
# 5. No import errors, no Python exceptions, no output at all from websocket connection attempts.
# 6. This suggests a low-level crash, segfault, or abrupt process kill (OOM, missing dependency, or C extension bug) in websocket-client or its dependencies.
# 7. Next steps: Check container logs for segfaults/OOM, try a simple TCP socket test (test_tcp.py), and consider downgrading websocket-client.
# 8. All diagnostic scripts and PowerShell commands are in the workspace for future reference.
#
# --- May 2025: Additional TCP Socket Test Procedure ---
#
# To rule out basic networking issues and isolate the problem to websocket-client, run a raw TCP socket test from within the ovos container:
#
# 1. Create test_tcp.py on the host:
#    import socket
#    import sys
#    import traceback
#    target_host = "<ovos_messagebus IP>"  # e.g., 172.20.0.2
#    target_port = 8181
#    try:
#        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#        sock.settimeout(10)
#        sock.connect((target_host, target_port))
#        print("SUCCESS! Connected.")
#        sock.close()
#        sys.exit(0)
#    except Exception as e:
#        print(f"ERROR: {e}")
#        traceback.print_exc()
#        sys.exit(1)
#
# 2. Copy test_tcp.py into the ovos container:
#    docker-compose -f "docker-compose.ai.yml" cp ./test_tcp.py ovos:/tmp/test_tcp.py
#
# 3. Run it and redirect output:
#    docker-compose -f "docker-compose.ai.yml" exec ovos sh -c "python3 /test_tcp.py > /tcp_output.txt 2>&1"
#
# 4. View the results:
#    docker-compose -f "docker-compose.ai.yml" exec ovos cat /tcp_output.txt
#
# - If you see "SUCCESS! Connected.", TCP networking is fine and the issue is likely with websocket-client or its dependencies.
# - If you see connection errors, investigate Docker networking, container IPs, or firewall issues.
#
# For OOM/segfault checks:
# - After a suspected crash, run: docker inspect ovos (look for State.OOMKilled)
# - Check docker logs ovos for Python or system-level crash messages.
#
# If migrating or repeating setup, review this log and the test scripts in the workspace for step-by-step troubleshooting.
#

