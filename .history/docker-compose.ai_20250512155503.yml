#
# NOTE: This stack is part of a multi-file Docker Compose setup.
#
# Other Compose files in this workspace:
#   - docker-compose.home.yml: Core home automation services (e.g., Home Assistant, Zigbee2MQTT, etc.)
#   - docker-compose.utils.yml: Utility/infrastructure services (Portainer, Watchtower, Nginx Proxy Manager, Tailscale, Cloudflared)
#
# This file (docker-compose.ai.yml) contains AI/ML services:
#   - frigate
#   - ollama
#   - stable-diffusion-webui
#   - whisper
#   - qdrant
#   - tgi
#   - xtts
#
# See the other files for additional services and to bring up the full stack, use:
#   docker-compose -f "docker-compose.ai.yml" -f "docker-compose.home.yml" -f "docker-compose.utils.yml" up -d
#

services:
  frigate:
    image: ghcr.io/blakeblackshear/frigate:stable
    container_name: frigate
    restart: unless-stopped
    privileged: true
    shm_size: '64mb'
    devices:
      - /dev/bus/usb:/dev/bus/usb
    volumes:
      - ./frigate/config:/config
      - ./frigate/media:/media/frigate
      - /etc/localtime:/etc/localtime:ro
    ports:
      - '5000:5000' # Frigate UI
      - '8554:8554' # RTSP
      - '8555:8555/tcp' # WebRTC
    environment:
      - FRIGATE_RTSP_PASSWORD=changeme

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    volumes:
      - ./ollama:/root/.ollama
    ports:
      - '11434:11434'
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Documentation for ollama usage
  #
  # To run a model using ollama, use the following command:
  #
  # sudo docker exec -it ollama ollama run <model_name>
  #
  # Example:
  # sudo docker exec -it ollama ollama run llama3:8b
  #
  # To list available models:
  # sudo docker exec -it ollama ollama list
  #
  # Ensure the ollama container is running and accessible on port 11434.

  # Stable Diffusion WebUI (image generation)
  stable-diffusion-webui:
    image: sd-auto:78
    container_name: stable-diffusion-webui
    restart: unless-stopped
    ports:
      - '7860:7860'
    volumes:
      - ./stable-diffusion/models:/models
      - ./stable-diffusion/outputs:/outputs
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Australia/Brisbane
      - CLI_ARGS=--listen
      # If using CPU only, add:
      # - COMMANDLINE_ARGS=--use-cpu all --no-half
    # Uncomment for GPU support if available:
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Whisper (voice-to-text)
  whisper:
    image: rhasspy/wyoming-whisper:latest
    container_name: whisper
    restart: unless-stopped
    command: >
      --model base.en
      --language en
      --data-dir /data
      --download-dir /data
    ports:
      - '10300:10300'
    volumes:
      - ./whisper/data:/data

  # Qdrant (vector database for AI memory)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    ports:
      - '6333:6333'
    volumes:
      - ./qdrant/data:/qdrant/storage

  # HuggingFace Text Generation Inference (LLM server)
  tgi:
    image: ghcr.io/huggingface/text-generation-inference:latest
    container_name: tgi
    restart: unless-stopped
    ports:
      - '8080:80'
    volumes:
      - ./tgi/data:/data

  # XTTS (text-to-speech with voice cloning)
  xtts:
    image: ghcr.io/coqui-ai/tts:latest  # Official Coqui image for XTTSv2 and GPU
    container_name: xtts
    restart: unless-stopped
    entrypoint: tts-server
    command: >
      --model_path /workspace/model/my_xtts_v2_local
      --config_path /workspace/model/my_xtts_v2_local/config.json
      --speakers_file_path /workspace/model/my_xtts_v2_local/speakers_xtts.pth
      --port 5002
      --use_cuda true
    volumes:
      - ./xtts/models:/workspace/model
      - ./xtts/speakers:/workspace/speakers
    ports:
      - "5002:5002"
    environment:
      - COQUI_TOS_AGREED=1
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
  # NOTE: synesthesiam/coqui-tts:latest does NOT support XTTSv2 models.
  # Use ghcr.io/coqui-ai/tts:latest for XTTSv2 support.
  # Model files must be in ./xtts/models/my_xtts_v2_local/ on the host.
  # Keep this service running until confirmed stable.

  # TROUBLESHOOTING LOG - OVOS (OpenVoiceOS) Setup [CONDENSED]
  # Goal: Get OpenVoiceOS (ovos-core & ovos-messagebus) running reliably in Docker.
  # All dates are nominal for logging purposes.

  # [Phase 1: Initial Attempts with Public Images (smartgic/ovos-core) - May 11-12, 2025]
  #
  # - Problem: Persistent "Connection Refused" from `ovos-core` to `ovos_messagebus`.
  # - Key Diagnostics & Findings:
  #   - Basic network connectivity (TCP, curl to messagebus IP/port) from `ovos` container worked.
  #   - `ovos_messagebus` healthcheck often problematic; `/core` WebSocket route identified as critical.
  #   - Direct Python WebSocket tests (`websocket.create_connection` to `ws://<host_ip>:<port>/core`)
  #     from within the `ovos` container eventually SUCCEEDED.
  #   - `ovos-bus-client` itself (when called by `ovos-core` services) still failed.
  #   - Suspected issues with Python 3.13 (in `smartgic/ovos-core:latest`), `websocket-client` versions,
  #     and how `ovos_bus_client` resolved/used connection parameters.
  #   - Ensured `mycroft.conf` (on host, mounted) had `message_bus_client.route = "/core"` and
  #     `ovos` service had `MESSAGEBUS_ROUTE=/core` env var. Still no success with public images.

  # [Phase 2: Switch to Custom Docker Image (Python 3.11) - May 12-13, 2025]
  #
  # - Rationale: Gain more control over Python environment and dependencies.
  # - Dockerfile (`ovos-docker/Dockerfile.custom-ovos-core`):
  #   - Based on `python:3.11-slim`.
  #   - Included `tini` for process management.
  #   - Installed system dependencies (`build-essential`, `swig`, `libfann-dev`) for Python packages.
  #   - Installed OVOS components from `requirements.txt` (e.g., `ovos-core`, `ovos-bus-client`,
  #     `ovos_padatious`, `websocket-client==0.57.0`).
  #   - Handled user creation (`ovos`) and directory permissions (`/home/ovos/...`).
  # - Initial Build/Runtime Issues with Custom Image:
  #   - `ModuleNotFoundError: No module named 'ovos_padatious'` -> Fixed by adding `swig`, `libfann-dev` to Dockerfile apt-get.
  #   - `ModuleNotFoundError: No module named 'ovos_core'` (or `ovos_core.skills`) -> Indicated `pip install`
  #     was not completing correctly. Resolved by ensuring robust `pip install -r requirements.txt`
  #     in Dockerfile and using `build --no-cache`. `pip list` eventually confirmed packages installed.
  #   - `PermissionError` for `/home/ovos/.local/state` -> Fixed with proper `chown` in Dockerfile.

  # [Phase 3: Connection Issue Persists with Custom Image - The Breakthrough - May 13, 2025]
  #
  # - Problem: Even with a seemingly correct custom build and all packages installed, `ovos-core`
  #   (specifically the `SkillsService`'s `MessageBusClient`) still reported "Connection Refused."
  # - Key Successes Replicated:
  #   - `ovos_messagebus` confirmed healthy and serving `ws://ovos_messagebus:8181/core`.
  #   - Direct WebSocket tests (`websocket.create_connection`) from `ovos` container to this URL succeeded.
  #   - Direct instantiation of `MessageBusClient(host="ovos_messagebus", port=8181, route="/core")`
  #     in test scripts within the `ovos` container SUCCEEDED.
  #
  # - The CRITICAL INSIGHT & FIX:
  #   - Investigation revealed that `ovos-core` services, when calling `MessageBusClient()` with no arguments,
  #     were deriving connection parameters via `ovos_bus_client.conf.load_message_bus_config()`.
  #   - This function was found to prioritize the **`config['websocket']` section** of `mycroft.conf`
  #     for determining client connection parameters (host, port, route), NOT `config['message_bus_client']`
  #     as initially assumed for client settings, and potentially with different precedence regarding ENV VARS
  #     in the full application context.
  #   - The `config['websocket']` section in the host's `./ovos_config/config/mycroft.conf` was previously
  #     configured for server-side binding (e.g., `host: "0.0.0.0"`).
  #   - **SOLUTION APPLIED:** The `./ovos_config/config/mycroft.conf` file (mounted into both `ovos_messagebus`
  #     and `ovos` containers at `/home/ovos/.config/mycroft/mycroft.conf`) was updated to ensure its
  #     **`"websocket"` section** contained the correct *client-side* parameters to reach `ovos_messagebus`:
  #     ```json
  #     "websocket": {
  #       "host": "ovos_messagebus",
  #       "port": 8181,
  #       "route": "/core",
  #       "ssl": false
  #     }
  #     ```
  #     (The `message_bus_client` section was also kept correctly configured for robustness/compatibility,
  #     and `MESSAGEBUS_HOST/PORT/ROUTE` environment variables remained set for `ovos` service).
  #
  # - Result of the Fix:
  #   - On subsequent restart, the "Connection Refused" errors in `ovos-core` logs **disappeared**.
  #   - `ovos-core` proceeded to initialize `ovos_padatious` and load skills successfully
  #     (e.g., `common_query.openvoiceos is ready`).
  #
  # - Current Status:
  #   - Custom OVOS Docker image builds successfully with all Python and system dependencies.
  #   - `ovos_messagebus` starts, is healthy, and serves `ws://ovos_messagebus:8181/core`.
  #   - `ovos-core` now successfully connects to `ovos_messagebus` and starts its services.
  #   - Key Learning: For `MessageBusClient()` called with no args by `ovos-core` services, the
  #     `mycroft.conf`'s `"websocket"` section was the effective source for connection parameters.
  #
  # Next step: Further testing of OVOS functionality.

# Add more AI/video services as needed

# Networks for OVOS services
networks:
  ovos_network:
    driver: bridge

# Additional Documentation for Home Automation Stack
#
# General Docker Commands:
#
# Start all services:
# docker-compose -f docker-compose.ai.yml up -d
#
# Stop all services:
# docker-compose -f docker-compose.ai.yml down
#
# Restart a specific service:
# docker-compose -f docker-compose.ai.yml restart <service_name>
#
# XTTS (Text-to-Speech) Important Notes:
#
# - Model Directory Structure: Models are persisted by mapping a host directory
#   (./xtts/models) to the container's default model cache path
#   (/root/.local/share/tts). This prevents re-downloads on restart.
#
# - Voice Cloning: XTTSv2 supports voice cloning from short audio samples (6+ seconds).
#   Store reference voice samples in ./xtts/speakers/ directory for organization.
#
# - GPU Acceleration: XTTSv2 is computationally intensive and strongly benefits from GPU.
#   Without GPU acceleration, speech generation will be much slower.
#
# - First Run: On first startup, XTTSv2 will download a large model (~7GB).
#   This may take significant time depending on your internet connection.
#
# - API Usage: To use the XTTS API for voice cloning, send a POST request to:
#   http://localhost:5002/api/tts with JSON body containing:
#   {
#     "text": "Your text to synthesize",
#     "speaker_wav": "base64_encoded_audio_sample",
#     "language": "en" (or other supported language code)
#   }
#
# - Supported Languages: XTTSv2 supports 17 languages including English (en),
#   Spanish (es), French (fr), German (de), Italian (it), Portuguese (pt),
#   Polish (pl), Turkish (tr), Russian (ru), Dutch (nl), Czech (cs), Arabic (ar),
#   Chinese (zh-cn), Japanese (ja), Korean (ko), Hungarian (hu), and Hindi (hi).
#
# - Audio Format: For best results with voice cloning, use WAV files with:
#   * 24kHz sample rate (preferred for XTTSv2, which will resample other rates)
#   * Minimal background noise
#   * At least 6 seconds of clear speech
#
# Resource Management:
#
# - Multiple AI services running simultaneously (especially Ollama, TGI,
#   Stable Diffusion, and XTTS) can be extremely resource-intensive.
# - Monitor system resources (RAM, VRAM, CPU) regularly using tools like:
#   * docker stats (for container resource usage)
#   * nvidia-smi (for GPU usage if using NVIDIA GPUs)
# - Consider adjusting resource limits for containers if necessary.
#
# Networking Overview:
#
# - All services run on a Docker bridge network (likely homeautomationstack_default)
# - Main service access points:
#   * Frigate UI: http://<host_ip>:5000
#   * Stable Diffusion WebUI: http://<host_ip>:7860
#   * Ollama API: http://<host_ip>:11434
#   * Whisper API: http://<host_ip>:10300
#   * Qdrant API: http://<host_ip>:6333
#   * TGI API: http://<host_ip>:8080
#   * XTTS API: http://<host_ip>:5002
#   * OVOS GUI WebSocket: http://<host_ip>:8181
#
# GPU Allocation:
#
# - Ollama and XTTS are configured to use GPU by default
# - For stable-diffusion-webui, uncomment the GPU section for much better performance
# - For TGI (text-generation-inference), consider enabling GPU for practical use
#   with larger models
#
# Text Generation Inference (TGI) Configuration:
#
# - The TGI service doesn't specify a model by default
# - To load a specific model, add environment variables like:
#   environment:
#     - MODEL_ID=mistralai/Mistral-7B-Instruct-v0.1
#
# Initial Model Downloads:
#
# - Several services will download large models on first run:
#   * Ollama: Models range from 1GB to 65GB+ depending on selection
#   * TGI: Large LLMs typically 2GB-30GB depending on model
#   * XTTS: ~7GB for the full XTTSv2 model and dependencies
#   * Stable Diffusion: Base models ~2-7GB each
# - Ensure sufficient disk space and a stable internet connection
# - Initial downloads can take anywhere from minutes to hours
#
# Security Considerations:
#
# - Change default passwords (like FRIGATE_RTSP_PASSWORD) immediately
# - If exposing services outside your local network:
#   * Use strong authentication
#   * Consider using HTTPS (via reverse proxy)
#   * Prefer VPN access over direct port forwarding
#   * Regularly update container images for security patches
#
# Updating Services:
#
# - Pull latest images: docker-compose -f docker-compose.ai.yml pull
# - Restart with new images: docker-compose -f docker-compose.ai.yml up -d
# - Check container logs after updates: docker logs <container_name>
#
# PUID/PGID Explanation:
#
# - Used for stable-diffusion-webui and potentially other services
# - Sets internal user/group ID for container processes
# - Ensures correct file ownership on mounted volumes
# - Find your host user's IDs with: id -u (PUID) and id -g (PGID)
#
# Data Volume Management:
#
# - Model and media data volumes can grow very large over time
# - Check Docker disk usage with: docker system df
# - Monitor specific volume directories: du -sh ./*/
# - Consider periodic cleanup of unused models and media
#
# Home Automation Stack Overall Structure:
#
# The complete stack is organized across three compose files:
# - docker-compose.ai.yml: AI and ML services (this file)
# - docker-compose.home.yml: Core home automation services
# - docker-compose.utils.yml: Infrastructure and utility services
#
# Utility Services (from docker-compose.utils.yml):
#
# - Portainer (container:portainer):
#   Web-based Docker management UI available at http://<host_ip>:9000
#
# - Watchtower (container:watchtower):
#   Automatic container updates when new images are available
#
# - Nginx Proxy Manager (container:nginx-proxy-manager):
#   Reverse proxy and SSL management, admin UI at http://<host_ip>:81
#
# - Tailscale (container:tailscale):
#   Secure remote access to your network using Tailscale VPN
#
# - Cloudflared (container:cloudflared):
#   Cloudflare tunnel for secure external access without port forwarding
#
# See docker-compose.utils.yml for detailed configuration of these services.
#
# Backup and Restore:
#
# To back up critical data, copy the following directories:
# - ./frigate/config and ./frigate/media
# - ./ollama (entire directory, not just models)
# - ./qdrant/data
# - ./stable-diffusion/models and ./stable-diffusion/outputs
# - ./whisper/data
# - ./xtts/models and ./xtts/speakers
# - ./ovos_config/config and ./ovos_config/data
#
# To restore, replace the directories with the backed-up versions.
#
# Environment Variables:
#
# - FRIGATE_RTSP_PASSWORD: Password for RTSP streams in Frigate.
# - PUID and PGID: User and group IDs for permissions in Stable Diffusion.
# - TZ: Timezone for services (e.g., Australia/Brisbane).
#
# Service-Specific Notes:
#
# Frigate:
# - Configuration file: ./frigate/config/config.yaml
# - Media storage: ./frigate/media/
#
# Stable Diffusion:
# - GPU vs. CPU: Use CLI_ARGS=--use-cpu all --no-half for CPU-only mode.
#
# Ollama:
# - Run a model: sudo docker exec -it ollama ollama run <model_name>
# - List models: sudo docker exec -it ollama ollama list
#
# OVOS:
# - Configuration file: ./ovos_config/config/mycroft.conf
# - Data storage: ./ovos_config/data/
#
# Note: Home Assistant is defined in a separate compose file (docker-compose.home.yml)
#
# Troubleshooting Tips:
#
# - Check container logs:
#   docker logs <container_name>
#
# - Verify container status:
#   docker ps
#
# - Restart Docker service if containers fail to start:
#   sudo systemctl restart docker
#
# - Ensure sufficient disk space for large models and media files.

