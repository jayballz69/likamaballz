# See AI_CODING_BASELINE_RULES.md for required practices.
# GitHub Actions workflow to enforce baseline rules, linting, and security scans
name: CI Baseline Enforcement
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - '**'

jobs:
  banner-check:
    name: Banner Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check in-file banner presence
        run: |
          set -o pipefail
          for file in $(git ls-files '*.py' '*.ps1' '*.md' '*.yml' '*.json'); do
            if ! head -n1 "$file" | grep -q 'See AI_CODING_BASELINE_RULES.md for required practices.'; then
              echo "❌ $file missing required banner"
              exit 1
            fi
          done

  commitlint:
    name: Conventional Commit Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint commit messages
        uses: wagoid/commitlint-github-action@v4
        with:
          configFile: ''

  lint-python:
    name: Python Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install linters
        run: |
          pip install flake8 black isort
      - name: Run flake8
        run: flake8 .
      - name: Run black check
        run: black --check .
      - name: Run isort check
        run: isort --check-only .

  trivy-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@v0.10.2
        with:
          scan-type: fs
          directory: .

  # Run pre-commit hooks for comprehensive linting
  pre-commit-checks:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0

  # YAML linting
  lint-yaml:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install yamllint
        run: |
          pip install yamllint
      - name: Run yamllint
        run: yamllint .

  # Python tests
  test-python:
    name: Python Pytest
    runs-on: ubuntu-latest
    needs: lint-python
    steps:
      - uses: actions/checkout@v3
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run pytest
        run: python -m pytest --maxfail=1 --disable-warnings -q

  # Example Node.js job with npm caching (uncomment and adapt if needed)
  # lint-js:
  #   name: JavaScript Lint & Format Check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Cache npm
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.x'
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Run linter
  #       run: npm run lint

  # Build Docker images
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker CLI
        run: echo "" | docker login --username "$DOCKER_USERNAME" --password-stdin
      - name: Build ovos image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.custom-ovos-core
          target: ovos
          tags: ovos:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false

  # Docker Compose smoke test to verify full stack comes up healthy
  smoke-test:
    name: Docker Compose Smoke Test
    needs: build-docker-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Start all services
        run: |
          docker-compose -f docker-compose.ai.yml -f docker-compose.home.yml -f docker-compose.utils.yml up -d
      - name: Wait for healthchecks
        run: |
          for i in $(seq 1 12); do
            docker-compose ps
            if docker-compose ps | grep -q "healthy"; then
              echo "Services are healthy";
              break;
            fi
            echo "Waiting for services... ($i)"
            sleep 5
          done
      - name: Tear down
        run: docker-compose down

  # Trivy image scan
  trivy-image-scan:
    name: Trivy Docker Image Scan
    runs-on: ubuntu-latest
    needs: build-docker-images
    steps:
      - uses: actions/checkout@v3
      - name: Scan ovos image for vulnerabilities
        uses: aquasecurity/trivy-action@v0.19.0
        with:
          image-ref: 'ovos'
          scan-type: 'image'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-ovos.sarif'
          exit-code: '1'
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-ovos.sarif'

  # Secret scanning for accidental credentials
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Install detect-secrets
        run: pip install detect-secrets
      - name: Run detect-secrets scan
        run: |
          detect-secrets scan --all-files > detect_secrets.json
      - name: Fail on detected secrets
        run: |
          if grep -q '"line_number"' detect_secrets.json; then
            echo "🚨 Potential secrets detected, please review detect_secrets.json";
            exit 1;
          else
            echo "No secrets detected.";
          fi
